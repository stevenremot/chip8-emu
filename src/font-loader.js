import { MainMemory } from "./main-memory.js";

const fontAddress = 0;

const fontData = new Uint8Array(
  [
    [0xf0, 0x90, 0x90, 0x90, 0xf0],
    [0x20, 0x60, 0x20, 0x20, 0x70],
    [0xf0, 0x10, 0xf0, 0x80, 0xf0],
    [0xf0, 0x10, 0xf0, 0x10, 0xf0],
    [0x90, 0x90, 0xf0, 0x10, 0x10],
    [0xf0, 0x80, 0xf0, 0x10, 0xf0],
    [0xf0, 0x80, 0xf0, 0x90, 0xf0],
    [0xf0, 0x10, 0x20, 0x40, 0x40],
    [0xf0, 0x90, 0xf0, 0x90, 0xf0],
    [0xf0, 0x90, 0xf0, 0x10, 0xf0],
    [0xf0, 0x90, 0xf0, 0x90, 0x90],
    [0xe0, 0x90, 0xe0, 0x90, 0xe0],
    [0xf0, 0x80, 0x80, 0x80, 0xf0],
    [0xe0, 0x90, 0x90, 0x90, 0xe0],
    [0xf0, 0x80, 0xf0, 0x80, 0xf0],
    [0xf0, 0x80, 0xf0, 0x80, 0x80],
  ].flat(),
);

export class FontLoader {
  /**
   * @param {MainMemory} memory
   */
  static loadFont(memory) {
    memory.writeRange(fontAddress, fontData);
  }

  /**
   * @param {number} digit
   */
  static getAddressForDigit(digit) {
    if (digit < 0 || digit > 0xf) {
      throw new Error(`Invalid digit: ${digit}`);
    }
    return fontAddress + digit * 5;
  }
}
